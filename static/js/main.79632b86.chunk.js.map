{"version":3,"sources":["features/quoteSlice.js","App.js","reportWebVitals.js","app/store.js","index.js"],"names":["quoteSlice","createSlice","name","initialState","quoteValue","quoteAuthor","reducers","newQuote","state","action","payload","newAuthor","actions","callNewquote","dispatch","fetch","then","response","json","data","randomNumber","Math","floor","random","text","author","App","quote","useSelector","useState","color","setColor","animating","setAnimating","useDispatch","useEffect","style","backgroundColor","className","onAnimationEnd","src","onClick","toString","slice","console","log","newcolor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","ReactDOM","render","store","document","getElementById"],"mappings":"0MAGaA,EAAaC,YAAY,CAClCC,KAAM,QACNC,aAAc,CACVC,WAAY,GACZC,YAAa,IAEjBC,SAAU,CACNC,SAAU,SAACC,EAAOC,GACdD,EAAMJ,WAAaK,EAAOC,SAE9BC,UAAW,SAACH,EAAOC,GACfD,EAAMH,YAAcI,EAAOC,Y,EAMAV,EAAWY,QAAnCL,E,EAAAA,SAAUI,E,EAAAA,UAEZE,EAAe,kBAAM,SAAAC,GAC9BC,MAAM,+BACDC,MAAK,SAAUC,GACZ,OAAOA,EAASC,UAEnBF,MAAK,SAAUG,GAEZ,IAAMC,EAAeC,KAAKC,MAAsB,KAAhBD,KAAKE,UAKrCT,EAASP,EAASY,EAAKC,GAAcI,OACrCV,EAASH,EAAUQ,EAAKC,GAAcK,cAKnCzB,IAAf,Q,cCOe0B,MA1Cf,WACE,IAAMC,EAAQC,aAAY,SAACpB,GAAD,OAAWA,EAAMmB,MAAMvB,cAC3CqB,EAASG,aAAY,SAACpB,GAAD,OAAWA,EAAMmB,MAAMtB,eAFrC,EAGawB,mBAAS,OAHtB,mBAGNC,EAHM,KAGCC,EAHD,OAIqBF,oBAAS,GAJ9B,mBAING,EAJM,KAIKC,EAJL,KAMPnB,EAAWoB,cAcjB,OAbAC,qBAAU,WACRrB,EAASD,OACR,CAACC,IAYF,qBAAKsB,MAAO,CAAEC,gBAAgB,GAAD,OAAKP,IAAWQ,UAAU,yDAAvD,SACE,uBAAMA,UAAU,wDAAhB,UACE,sBAAKA,UAAU,UAAf,UAEE,qBAAIC,eAAgB,kBAAMN,GAAa,IAAQK,UAAS,UAAKN,EAAY,OAAS,GAA1B,6BAAxD,UAAiH,qBAAKM,UAAU,WAAWE,IAAI,mBAAoBb,EAAnK,OAEA,oBAAGY,eAAgB,kBAAMN,GAAa,IAAQK,UAAS,UAAKN,EAAY,OAAS,GAA1B,kDAAvD,eAAwIP,QAE1I,qBAAKa,UAAU,6BAAf,SACE,wBAAQF,MAAO,CAAEC,gBAAgB,GAAD,OAAKP,IAAWQ,UAAU,oEAAoEG,QAAS,WACrI3B,EAASD,KApBF,WACf,IAAIiB,EAAQ,IACZA,GAAST,KAAKE,SAASmB,SAAS,IAAIC,MAAM,EAAG,GAC7CZ,EAASD,GACTc,QAAQC,IAAIf,GACZG,GAAa,GAgBLa,IAFF,+BCvBKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCJCO,cAAe,CAC1BC,QAAS,CACL7B,MAAO3B,KCGfyD,IAASC,OACP,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.79632b86.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\n\r\nexport const quoteSlice = createSlice({\r\n    name: 'quote',\r\n    initialState: {\r\n        quoteValue: '',\r\n        quoteAuthor: ''\r\n    },\r\n    reducers: {\r\n        newQuote: (state, action) => {\r\n            state.quoteValue = action.payload\r\n        },\r\n        newAuthor: (state, action) => {\r\n            state.quoteAuthor = action.payload\r\n        }\r\n\r\n    }\r\n})\r\n\r\nexport const { newQuote, newAuthor } = quoteSlice.actions\r\n\r\nexport const callNewquote = () => dispatch => {\r\n    fetch(\"https://type.fit/api/quotes\")\r\n        .then(function (response) {\r\n            return response.json();\r\n        })\r\n        .then(function (data) {\r\n\r\n            const randomNumber = Math.floor(Math.random() * 1643);\r\n            // console.log(data)\r\n            // console.log(randomNumber)\r\n            // console.log(data[randomNumber].text)\r\n            // console.log(data[randomNumber].author)\r\n            dispatch(newQuote(data[randomNumber].text))\r\n            dispatch(newAuthor(data[randomNumber].author))\r\n        })\r\n}\r\n\r\n\r\nexport default quoteSlice.reducer","import './App.css';\nimport React, { useEffect, useState } from 'react'\nimport { callNewquote } from './features/quoteSlice'\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction App() {\n  const quote = useSelector((state) => state.quote.quoteValue)\n  const author = useSelector((state) => state.quote.quoteAuthor)\n  const [color, setColor] = useState('red')\n  const [animating, setAnimating] = useState(true);\n\n  const dispatch = useDispatch()\n  useEffect(() => {\n    dispatch(callNewquote())\n  }, [dispatch])\n  \n  const newcolor = () => {\n    let color = '#'\n    color += Math.random().toString(16).slice(2, 8)\n    setColor(color)\n    console.log(color)\n    setAnimating(true)\n  }\n\n\n  return (\n    <div style={{ backgroundColor: `${color}` }} className=\"App h-screen flex flex-row justify-center items-center\" >\n      <span className=\"bg-green-50 rounded-lg shadow-lg h-auto w  w-2/5 p-10\">\n        <div className=' h-auto' >\n\n          <h1 onAnimationEnd={() => setAnimating(false)} className={`${animating ? 'fade' : ''} flex font-serif text-4xl`}><img className='h-8 p-1 ' src=\"left-quote.png\" />{quote} </h1>\n\n          <p onAnimationEnd={() => setAnimating(false)} className={`${animating ? 'fade' : ''} font-light text-xl flex flex-row-reverse m-6 `}>~~{author}</p>\n        </div>\n        <div className=\"flex flex-row-reverse mt-6\">\n          <button style={{ backgroundColor: `${color}` }} className=\"btn shadow-md text-xl p-2 pl-4 pr-4 rounded-md focus:outline-none\" onClick={() => {\n            dispatch(callNewquote())\n            newcolor()\n          }}>\n            New quote\n          </button>\n        </div>\n      </span>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\"\r\nimport quoteSlice from '../features/quoteSlice'\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        quote: quoteSlice\r\n    }\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}